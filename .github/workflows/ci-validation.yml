name: CI Validation

on:
  pull_request:
    branches: [ something ]
  push:
    branches: [ something ]

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t midnight-mcp-test .

    - name: Run linting
      run: |
        docker run --rm -v $(pwd):/app -w /app midnight-mcp-test \
        sh -c "yarn install && yarn lint"

    - name: Run unit tests
      run: |
        docker run --rm -v $(pwd):/app -w /app midnight-mcp-test \
        sh -c "yarn install && yarn test:unit"
      env:
        NODE_ENV: test
        CI: true

    - name: Run integration tests
      run: |
        docker run --rm -v $(pwd):/app -w /app midnight-mcp-test \
        sh -c "yarn install && yarn test:integration"
      env:
        NODE_ENV: test
        CI: true

    - name: Generate coverage report
      run: |
        docker run --rm -v $(pwd):/app -w /app midnight-mcp-test \
        sh -c "yarn install && yarn test:coverage"
      env:
        NODE_ENV: test
        CI: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ci-test-results
        path: |
          coverage/
          logs/
        retention-days: 7

    - name: Generate comprehensive test summary
      if: always()
      run: |
        echo "## CI Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment" >> $GITHUB_STEP_SUMMARY
        echo "✅ Node.js version: 22.15.1 (from Dockerfile)" >> $GITHUB_STEP_SUMMARY
        echo "✅ Platform: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "✅ Container: Docker-based execution" >> $GITHUB_STEP_SUMMARY
        echo "✅ Package manager: Yarn 4.1.0" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Linting completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Integration tests completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Coverage report generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Information" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/lcov.info ]; then
          echo "📊 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "📁 Coverage directory contents:" >> $GITHUB_STEP_SUMMARY
          ls -la coverage/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 Coverage summary:" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json | jq -r '.total.lines.pct' | xargs -I {} echo "Lines: {}%" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total.statements.pct' | xargs -I {} echo "Statements: {}%" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total.functions.pct' | xargs -I {} echo "Functions: {}%" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total.branches.pct' | xargs -I {} echo "Branches: {}%" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ Coverage report not generated" >> $GITHUB_STEP_SUMMARY
        fi
